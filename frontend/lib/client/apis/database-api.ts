/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 *  The OpenAPI 3.0 specification for the REST API of the Software Templates Hub: Create your project from cookiecutter templates via web interface: [https://templates.services.fedcloud.eu](https://templates.services.fedcloud.eu)  - [Templates Hub](https://templates.services.fedcloud.eu) - [How to add your template to the Hub](https://github.com/m-team-kit/templates-hub/blob/main/README.md) 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base.js';
// @ts-ignore
import { Forbidden } from '../models/index.js';
// @ts-ignore
import { ServerError } from '../models/index.js';
// @ts-ignore
import { Unauthorized } from '../models/index.js';
/**
 * DatabaseApi - axios parameter creator
 * @export
 */
export const DatabaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to create local copy of the database from YAML files in the git repository.
         * @summary (Admin) Creates local database.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDB: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/db:create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update local copy of the database from YAML files in the git repository.
         * @summary (Admin) Updates local database.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDB: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/db:update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabaseApi - functional programming interface
 * @export
 */
export const DatabaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabaseApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to create local copy of the database from YAML files in the git repository.
         * @summary (Admin) Creates local database.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDB(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDB(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update local copy of the database from YAML files in the git repository.
         * @summary (Admin) Updates local database.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDB(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDB(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatabaseApi - factory interface
 * @export
 */
export const DatabaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabaseApiFp(configuration)
    return {
        /**
         * Use this method to create local copy of the database from YAML files in the git repository.
         * @summary (Admin) Creates local database.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDB(options?: any): AxiosPromise<void> {
            return localVarFp.createDB(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update local copy of the database from YAML files in the git repository.
         * @summary (Admin) Updates local database.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDB(options?: any): AxiosPromise<void> {
            return localVarFp.updateDB(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatabaseApi - object-oriented interface
 * @export
 * @class DatabaseApi
 * @extends {BaseAPI}
 */
export class DatabaseApi extends BaseAPI {
    /**
     * Use this method to create local copy of the database from YAML files in the git repository.
     * @summary (Admin) Creates local database.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public createDB(options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).createDB(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update local copy of the database from YAML files in the git repository.
     * @summary (Admin) Updates local database.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public updateDB(options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).updateDB(options).then((request) => request(this.axios, this.basePath));
    }
}

