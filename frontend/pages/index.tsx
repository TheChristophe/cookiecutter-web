import { NextPage } from 'next';
import { useQuery } from 'react-query';
import { LegalField } from 'lib/template';
import Form from '../components/Form';
import { FormEventHandler, useCallback, useState } from 'react';
import Navbar from '../components/Navbar';
import { useAuth } from 'react-oidc-context';
import Footer from '../components/Footer';
import { TEMPLATES } from '../lib/templates';
import { buildTemplateUrl, postForm } from '../lib/api';

const unpackResponse = async (r: Response) => {
    return {
        // file contents
        blob: await r.blob(),
        // get filename from headers if possible
        filename:
            r.headers.get('Content-Disposition')?.replace('attachment;filename=', '') ??
            'cookiecutter.zip',
    };
};

const saveFile = ({ blob, filename }: Awaited<ReturnType<typeof unpackResponse>>) => {
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.click();
};

const TemplateForm = () => {
    const auth = useAuth();

    const [templateUrl, setTemplateUrl] = useState(TEMPLATES[0].templateUrl);
    const [helpUrl, setHelpUrl] = useState<string | undefined>(undefined);
    const [gitRepo, setGitRepo] = useState(TEMPLATES[0].gitRepo);
    const [gitBranch, setGitBranch] = useState(TEMPLATES[0].gitBranch);

    const fields = useQuery(
        [templateUrl, gitRepo, gitBranch],
        async () => {
            const response = await fetch(buildTemplateUrl(templateUrl, helpUrl));
            // TODO: less dirty approach?
            return (response.json as () => Promise<LegalField[]>)();
        },
        { refetchOnWindowFocus: false }
    );

    const handleSubmit = useCallback<FormEventHandler<HTMLFormElement>>(async (e) => {
        e.preventDefault();
        if (auth.user?.access_token === undefined) {
            return;
        }
        const response = await postForm(
            auth.user.access_token,
            {
                url: templateUrl,
                git_repo: gitRepo,
                git_branch: gitBranch,
            },
            new FormData(e.currentTarget)
        );
        const file = await unpackResponse(response);
        saveFile(file);
    }, []);

    return (
        <>
            <select
                onChange={(e) => {
                    const template = TEMPLATES[parseInt(e.target.value)];
                    setTemplateUrl(template.templateUrl);
                    setGitRepo(template.gitRepo);
                    setGitBranch(template.gitBranch);
                    setHelpUrl(template.helpUrl);
                }}
            >
                {TEMPLATES.map((t, i) => {
                    return (
                        <option key={t.gitRepo + t.gitBranch} value={i}>
                            {t.name}
                        </option>
                    );
                })}
            </select>
            <form onSubmit={handleSubmit}>
                <p>
                    Filling this web-form will generate a .zip file with the folders generated by
                    the cookiecutter. It will contain everything necessary to start your
                    DEEP-Project.
                </p>
                <div>{fields.isSuccess && <Form fields={fields.data} />}</div>
                <input className="button" type="submit" value="Generate" />
            </form>
        </>
    );
};

const Home: NextPage = () => {
    const auth = useAuth();

    return (
        <>
            <div style={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
                <Navbar />
                <section className="header" style={{ paddingTop: '7em' }}></section>
                <div className="container" style={{ flexGrow: 1 }}>
                    <main>
                        {auth.isAuthenticated ? (
                            <TemplateForm />
                        ) : (
                            <>
                                <p>Please log in!</p>
                                <button onClick={() => auth.signinRedirect()}>Login</button>
                            </>
                        )}
                    </main>
                </div>
                <Footer />
            </div>
        </>
    );
};

export default Home;
