gzip on;

root /var/www/web;

server {
  listen       80;
  listen       [::]:80;
  
  server_name ${domains};

  location /nginx/reload {
    auth_basic 'Access restriction';
    auth_basic_user_file /tmp/.htpasswd;
    proxy_pass http://localhost:9000;
  }

  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  location / {
    return 301 https://$host$request_uri;
  }
}

server {
  listen       443 http2 ssl default_server;
  listen       [::]:443 http2 ssl default_server;

  server_name ${domains};
  
  ssl_certificate /etc/letsencrypt/live/${nginx_domain}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/${nginx_domain}/privkey.pem;

  include /etc/nginx/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/nginx/letsencrypt/ssl-dhparams.pem;

  include mime.types;

  add_header 'Access-Control-Allow-Origin' * always;

  location ${BACKEND_ROUTE}/v1 {
    if ($request_method = OPTIONS ) {
      add_header 'Access-Control-Allow-Origin' *;
      add_header "Access-Control-Allow-Methods" "GET, POST, PATCH, PUT, OPTIONS, HEAD";
      add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
      return 200;
    }

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Scheme $scheme;
    proxy_set_header X-Script-Name ${BACKEND_ROUTE}/v1;
    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://backend_v1:5000;
  }

  # This is required: the webapp tries connecting to the webpack server for updates,
  # it sees https:// and attempts wss://, but the dev server is running http:// (ws://), so
  # some special rules are required
  location /_next/webpack-hmr {
    if ($request_method = OPTIONS ) {
      add_header 'Access-Control-Allow-Origin' *;
      add_header "Access-Control-Allow-Methods" "GET, POST, PATCH, PUT, OPTIONS, HEAD";
      add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
      return 200;
    }

    proxy_pass http://frontend:3000;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  location / {
    if ($request_method = OPTIONS ) {
      add_header 'Access-Control-Allow-Origin' *;
      add_header "Access-Control-Allow-Methods" "GET, POST, PATCH, PUT, OPTIONS, HEAD";
      add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
      return 200;
    }

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Scheme $scheme;
    proxy_set_header X-Script-Name /;
    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://frontend:3000;
  }

  # Deny .htaccess etc
  location ~ /\.ht {
    deny  all;
  }
}
