version: "3.5"

services:
  frontend:
    container_name: frontend
    restart: unless-stopped
    image: frontend
    build:
      context: frontend
    depends_on:
      - backend_v1
    environment:
      # refer to configuration.ts and _app.tsx to see used vars
      NEXT_PUBLIC_OAUTH_AUTHORITY: ${OAUTH_AUTHORITY}
      NEXT_PUBLIC_OIDC_REDIRECT_HOST: ${FRONTEND_REDIRECT_HOST}
      NEXT_PUBLIC_OIDC_CLIENT_ID: ${FRONTEND_OIDC_CLIENT_ID}
      NEXT_PUBLIC_API_ROUTE: ${FRONTEND_API_ROUTE}
    labels:
      traefik.http.routers.webapp.rule: Host(`${DOMAIN}`)

  backend_v1:
    container_name: backend_v1
    restart: unless-stopped
    image: backend_v1
    build:
      context: backend
      network: host
      args:
        INSTALL_PYTHON_VERSION: 3.8
    environment:
      BACKEND_ROUTE: /api/v1
      GUNICORN_WORKERS: 1
      SECRET_KEY_FILE: /run/secrets/cookie_secret
    secrets:
      - cookie_secret
    labels:
      traefik.http.routers.backend.rule: Host(`${DOMAIN}`) && PathPrefix(`/api/v1`)
      traefik.http.middlewares.cors.headers.accesscontrolallowmethods: "GET,OPTIONS,PUT,POST,PATCH,DELETE"
      traefik.http.middlewares.cors.headers.accesscontrolallowheaders: "*"
      traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist: "https://${DOMAIN},http://${DOMAIN}"
      traefik.http.middlewares.cors.headers.accesscontrolmaxage: "100"
      traefik.http.middlewares.cors.headers.addvaryheader: "true"
      traefik.http.routers.backend.middlewares: cors

  reverse-proxy:
    container_name: traefik
    restart: unless-stopped
    image: traefik:v2.10
    command:
      - "--entrypoints.web.address=:80"
      - "--providers.docker"
    depends_on:
      - backend_v1
      - frontend
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

secrets:
  cookie_secret:
    file: cookie_secret.txt
